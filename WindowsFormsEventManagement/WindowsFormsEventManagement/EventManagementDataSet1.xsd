<?xml version="1.0" encoding="utf-8"?>
<xs:schema id="EventManagementDataSet1" targetNamespace="http://tempuri.org/EventManagementDataSet1.xsd" xmlns:mstns="http://tempuri.org/EventManagementDataSet1.xsd" xmlns="http://tempuri.org/EventManagementDataSet1.xsd" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata" xmlns:msprop="urn:schemas-microsoft-com:xml-msprop" attributeFormDefault="qualified" elementFormDefault="qualified">
  <xs:annotation>
    <xs:appinfo source="urn:schemas-microsoft-com:xml-msdatasource">
      <DataSource DefaultConnectionIndex="0" FunctionsComponentName="QueriesTableAdapter" Modifier="AutoLayout, AnsiClass, Class, Public" SchemaSerializationMode="IncludeSchema" xmlns="urn:schemas-microsoft-com:xml-msdatasource">
        <Connections>
          <Connection AppSettingsObjectName="Settings" AppSettingsPropertyName="EventManagementConnectionString" ConnectionStringObject="" IsAppSettingsProperty="true" Modifier="Assembly" Name="EventManagementConnectionString (Settings)" ParameterPrefix="@" PropertyReference="ApplicationSettings.WindowsFormsEventManagement.Properties.Settings.GlobalReference.Default.EventManagementConnectionString" Provider="System.Data.SqlClient" />
        </Connections>
        <Tables>
          <TableAdapter BaseClass="System.ComponentModel.Component" DataAccessorModifier="AutoLayout, AnsiClass, Class, Public" DataAccessorName="EventTypesTableAdapter" GeneratorDataComponentClassName="EventTypesTableAdapter" Name="EventTypes" UserDataComponentName="EventTypesTableAdapter">
            <MainSource>
              <DbSource ConnectionRef="EventManagementConnectionString (Settings)" DbObjectName="EventManagement.dbo.EventTypes" DbObjectType="Table" FillMethodModifier="Public" FillMethodName="Fill" GenerateMethods="Both" GenerateShortCommands="true" GeneratorGetMethodName="GetData" GeneratorSourceName="Fill" GetMethodModifier="Public" GetMethodName="GetData" QueryType="Rowset" ScalarCallRetval="System.Object, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" UseOptimisticConcurrency="true" UserGetMethodName="GetData" UserSourceName="Fill">
                <DeleteCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>DELETE FROM [dbo].[EventTypes] WHERE (([TypeID] = @Original_TypeID) AND ([TypeDescription] = @Original_TypeDescription))</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_TypeID" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="TypeID" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@Original_TypeDescription" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="TypeDescription" SourceColumnNullMapping="false" SourceVersion="Original" />
                    </Parameters>
                  </DbCommand>
                </DeleteCommand>
                <InsertCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>INSERT INTO [dbo].[EventTypes] ([TypeDescription]) VALUES (@TypeDescription);
SELECT TypeID, TypeDescription FROM EventTypes WHERE (TypeID = SCOPE_IDENTITY())</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@TypeDescription" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="TypeDescription" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </InsertCommand>
                <SelectCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>SELECT TypeID, TypeDescription FROM dbo.EventTypes</CommandText>
                    <Parameters />
                  </DbCommand>
                </SelectCommand>
                <UpdateCommand>
                  <DbCommand CommandType="Text" ModifiedByUser="false">
                    <CommandText>UPDATE [dbo].[EventTypes] SET [TypeDescription] = @TypeDescription WHERE (([TypeID] = @Original_TypeID) AND ([TypeDescription] = @Original_TypeDescription));
SELECT TypeID, TypeDescription FROM EventTypes WHERE (TypeID = @TypeID)</CommandText>
                    <Parameters>
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@TypeDescription" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="TypeDescription" SourceColumnNullMapping="false" SourceVersion="Current" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="Int32" Direction="Input" ParameterName="@Original_TypeID" Precision="0" ProviderType="Int" Scale="0" Size="0" SourceColumn="TypeID" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="" DataSourceName="" DbType="AnsiString" Direction="Input" ParameterName="@Original_TypeDescription" Precision="0" ProviderType="VarChar" Scale="0" Size="0" SourceColumn="TypeDescription" SourceColumnNullMapping="false" SourceVersion="Original" />
                      <Parameter AllowDbNull="false" AutogeneratedName="TypeID" ColumnName="TypeID" DataSourceName="EventManagement.dbo.EventTypes" DataTypeServer="int" DbType="Int32" Direction="Input" ParameterName="@TypeID" Precision="0" ProviderType="Int" Scale="0" Size="4" SourceColumn="TypeID" SourceColumnNullMapping="false" SourceVersion="Current" />
                    </Parameters>
                  </DbCommand>
                </UpdateCommand>
              </DbSource>
            </MainSource>
            <Mappings>
              <Mapping SourceColumn="TypeID" DataSetColumn="TypeID" />
              <Mapping SourceColumn="TypeDescription" DataSetColumn="TypeDescription" />
            </Mappings>
            <Sources />
          </TableAdapter>
        </Tables>
        <Sources />
      </DataSource>
    </xs:appinfo>
  </xs:annotation>
  <xs:element name="EventManagementDataSet1" msdata:IsDataSet="true" msdata:UseCurrentLocale="true" msprop:EnableTableAdapterManager="True" msprop:Generator_DataSetName="EventManagementDataSet1" msprop:Generator_UserDSName="EventManagementDataSet1">
    <xs:complexType>
      <xs:choice minOccurs="0" maxOccurs="unbounded">
        <xs:element name="EventTypes" msprop:Generator_TableClassName="EventTypesDataTable" msprop:Generator_TableVarName="tableEventTypes" msprop:Generator_TablePropName="EventTypes" msprop:Generator_RowDeletingName="EventTypesRowDeleting" msprop:Generator_RowChangingName="EventTypesRowChanging" msprop:Generator_RowEvHandlerName="EventTypesRowChangeEventHandler" msprop:Generator_RowDeletedName="EventTypesRowDeleted" msprop:Generator_UserTableName="EventTypes" msprop:Generator_RowChangedName="EventTypesRowChanged" msprop:Generator_RowEvArgName="EventTypesRowChangeEvent" msprop:Generator_RowClassName="EventTypesRow">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="TypeID" msdata:ReadOnly="true" msdata:AutoIncrement="true" msdata:AutoIncrementSeed="-1" msdata:AutoIncrementStep="-1" msprop:Generator_ColumnVarNameInTable="columnTypeID" msprop:Generator_ColumnPropNameInRow="TypeID" msprop:Generator_ColumnPropNameInTable="TypeIDColumn" msprop:Generator_UserColumnName="TypeID" type="xs:int" />
              <xs:element name="TypeDescription" msprop:Generator_ColumnVarNameInTable="columnTypeDescription" msprop:Generator_ColumnPropNameInRow="TypeDescription" msprop:Generator_ColumnPropNameInTable="TypeDescriptionColumn" msprop:Generator_UserColumnName="TypeDescription">
                <xs:simpleType>
                  <xs:restriction base="xs:string">
                    <xs:maxLength value="50" />
                  </xs:restriction>
                </xs:simpleType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:choice>
    </xs:complexType>
    <xs:unique name="Constraint1" msdata:PrimaryKey="true">
      <xs:selector xpath=".//mstns:EventTypes" />
      <xs:field xpath="mstns:TypeID" />
    </xs:unique>
  </xs:element>
</xs:schema>